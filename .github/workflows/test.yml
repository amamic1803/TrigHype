name: Test and Lint

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test-and-lint:
    name: Test and Lint
    strategy:
      matrix:
        os: [ ubuntu-24.04, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update
              sudo apt install ninja-build -y
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install ninja
              choco install mingw
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install ninja
              brew install llvm
              ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
              ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi

      - name: Compile and test
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              cmake \
                -DCMAKE_C_COMPILER=gcc \
                -DCMAKE_CXX_COMPILER=g++ \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_FLAGS='-Wall -Wextra -Wpedantic -Werror' \
                -DCMAKE_CXX_FLAGS='-Wall -Wextra -Wpedantic -Werror' \
                -G Ninja \
                -S . -B build
              cmake --build build
              cd ./build
              ctest
          elif [ "$RUNNER_OS" == "Windows" ]; then
              cmake \
                -DCMAKE_C_COMPILER=C:\ProgramData\mingw64\mingw64\bin\gcc.exe \
                -DCMAKE_CXX_COMPILER=C:\ProgramData\mingw64\mingw64\bin\g++.exe \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_FLAGS='-Wall -Wextra -Wpedantic -Werror' \
                -DCMAKE_CXX_FLAGS='-Wall -Wextra -Wpedantic -Werror' \
                -G Ninja \
                -S . -B build
              cmake --build build
              cd ./build
              ctest
          elif [ "$RUNNER_OS" == "macOS" ]; then
              cmake \
                -DCMAKE_C_COMPILER=gcc \
                -DCMAKE_CXX_COMPILER=g++ \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_FLAGS='-Wall -Wextra -Wpedantic -Werror' \
                -DCMAKE_CXX_FLAGS='-Wall -Wextra -Wpedantic -Werror' \
                -G Ninja \
                -S . -B build
              cmake --build build
              cd ./build
              ctest
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
